// JavaScript DocumentEmber.assert = function(obj) {  return obj === null || obj === undefined;};Ember.TextField.reopen({  attributeBindings: ['name']})Ember.Select.reopen({  attributeBindings: ['name']})//http://stackoverflow.com/questions/11836596/creating-a-grouped-select-in-ember-js//Sort of taken from here... Note, the GIST Never worked for meEmber.CustomGroupedSelect = Ember.View.extend({      tagName: 'select',    classNameBindings: ['class'],    allOpts: null,        defaultTemplate: Ember.Handlebars.compile('{{#if view.prompt}}<option value>{{view.prompt}}</option>{{/if}}{{#each view.optGroup}}{{view Ember.CustomSelectOptGroup labelBinding="name" groupBinding="name"}}{{/each}}'),     change: function() {        Ember.get(this,'optSelect').getItemByProperty('name',this.$()[0].value,0);        Ember.get(this,'selection').set('option',Ember.get(this,'optSelect').get('item'));    }    });Ember.CustomSelectOptGroup = Em.View.extend({  tagName: 'optgroup',  classNames: [],  attributeBindings: ['label'],  group: "",    content: function() {    return Ember.get(this,'parentView.optSelect').get('content').filterProperty('filter_name',this.get('group'));  }.property(),    defaultTemplate: Ember.Handlebars.compile('{{#each view.content}}{{view Ember.CustomSelectOption contentBinding="this"}}{{/each}}')});Ember.CustomSelectOption = Em.View.extend({        tagName: 'option',    classNames: [],    attributeBindings: ['value','selected'],    valueBinding: 'content.name',    defaultTemplate: Ember.Handlebars.compile('{{view.content.name}}'),    selected: false,        optionDidChange: function() {        if (Ember.get(this,'parentView.parentView.selection.option') != null) {            if (this.get('content').get('name') == Ember.get(this,'parentView.parentView.selection.option').get('name')) {                this.set('selected',true);            } else {                this.set('selected',false);            }        } else {            this.set('selected',false);        }    }.observes('parentView.parentView.selection.option')    });Collectrium.EditableTextField = Ember.TextField.extend({        oval: null,    editMode: false,        keyDown: function(evt) {        if (evt.keyCode == 13) {            evt.preventDefault();            this.get('parent').facetedClick();            return;        }    },        click: function(evt) {        if (! this.get('editMode')){            evt.preventDefault();            this.set('oval',this.get('value'));            this.set('editMode',true);        }    },        focusOut: function(evt) {        if (this.get('editMode')){            //console.log("FOCUS");            this.get('parent').doBlur();        }    },        change: function(evt) {        if (this.get('editMode')){            //console.log("CHANGE");            this.get('parent').doBlur();        }    }});Collectrium.selectAction = Ember.Object.extend({    id: null,    action: null,    label: null,    selected: false});